// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  cosponsors_By_Party: (
    where?: Cosponsors_By_PartyWhereInput
  ) => Promise<boolean>;
  bill: (where?: BillWhereInput) => Promise<boolean>;
  summary: (where?: SummaryWhereInput) => Promise<boolean>;
  sector: (where?: SectorWhereInput) => Promise<boolean>;
  industry: (where?: IndustryWhereInput) => Promise<boolean>;
  contributor: (where?: ContributorWhereInput) => Promise<boolean>;
  legislator: (where?: LegislatorWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  cosponsors_By_Parties: (
    args?: {
      where?: Cosponsors_By_PartyWhereInput;
      orderBy?: Cosponsors_By_PartyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<Cosponsors_By_PartyNode>>;
  cosponsors_By_PartiesConnection: (
    args?: {
      where?: Cosponsors_By_PartyWhereInput;
      orderBy?: Cosponsors_By_PartyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Cosponsors_By_PartyConnection;
  bills: (
    args?: {
      where?: BillWhereInput;
      orderBy?: BillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<BillNode>>;
  billsConnection: (
    args?: {
      where?: BillWhereInput;
      orderBy?: BillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BillConnection;
  summaries: (
    args?: {
      where?: SummaryWhereInput;
      orderBy?: SummaryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<SummaryNode>>;
  summariesConnection: (
    args?: {
      where?: SummaryWhereInput;
      orderBy?: SummaryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SummaryConnection;
  sectors: (
    args?: {
      where?: SectorWhereInput;
      orderBy?: SectorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<SectorNode>>;
  sectorsConnection: (
    args?: {
      where?: SectorWhereInput;
      orderBy?: SectorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SectorConnection;
  industries: (
    args?: {
      where?: IndustryWhereInput;
      orderBy?: IndustryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<IndustryNode>>;
  industriesConnection: (
    args?: {
      where?: IndustryWhereInput;
      orderBy?: IndustryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IndustryConnection;
  contributors: (
    args?: {
      where?: ContributorWhereInput;
      orderBy?: ContributorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<ContributorNode>>;
  contributorsConnection: (
    args?: {
      where?: ContributorWhereInput;
      orderBy?: ContributorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ContributorConnection;
  legislator: (where: LegislatorWhereUniqueInput) => Legislator;
  legislators: (
    args?: {
      where?: LegislatorWhereInput;
      orderBy?: LegislatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<LegislatorNode>>;
  legislatorsConnection: (
    args?: {
      where?: LegislatorWhereInput;
      orderBy?: LegislatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LegislatorConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCosponsors_By_Party: (
    data: Cosponsors_By_PartyCreateInput
  ) => Cosponsors_By_Party;
  updateManyCosponsors_By_Parties: (
    args: {
      data: Cosponsors_By_PartyUpdateInput;
      where?: Cosponsors_By_PartyWhereInput;
    }
  ) => BatchPayload;
  deleteManyCosponsors_By_Parties: (
    where?: Cosponsors_By_PartyWhereInput
  ) => BatchPayload;
  createBill: (data: BillCreateInput) => Bill;
  updateManyBills: (
    args: { data: BillUpdateInput; where?: BillWhereInput }
  ) => BatchPayload;
  deleteManyBills: (where?: BillWhereInput) => BatchPayload;
  createSummary: (data: SummaryCreateInput) => Summary;
  updateManySummaries: (
    args: { data: SummaryUpdateInput; where?: SummaryWhereInput }
  ) => BatchPayload;
  deleteManySummaries: (where?: SummaryWhereInput) => BatchPayload;
  createSector: (data: SectorCreateInput) => Sector;
  updateManySectors: (
    args: { data: SectorUpdateInput; where?: SectorWhereInput }
  ) => BatchPayload;
  deleteManySectors: (where?: SectorWhereInput) => BatchPayload;
  createIndustry: (data: IndustryCreateInput) => Industry;
  updateManyIndustries: (
    args: { data: IndustryUpdateInput; where?: IndustryWhereInput }
  ) => BatchPayload;
  deleteManyIndustries: (where?: IndustryWhereInput) => BatchPayload;
  createContributor: (data: ContributorCreateInput) => Contributor;
  updateManyContributors: (
    args: { data: ContributorUpdateInput; where?: ContributorWhereInput }
  ) => BatchPayload;
  deleteManyContributors: (where?: ContributorWhereInput) => BatchPayload;
  createLegislator: (data: LegislatorCreateInput) => Legislator;
  updateLegislator: (
    args: { data: LegislatorUpdateInput; where: LegislatorWhereUniqueInput }
  ) => Legislator;
  updateManyLegislators: (
    args: { data: LegislatorUpdateInput; where?: LegislatorWhereInput }
  ) => BatchPayload;
  upsertLegislator: (
    args: {
      where: LegislatorWhereUniqueInput;
      create: LegislatorCreateInput;
      update: LegislatorUpdateInput;
    }
  ) => Legislator;
  deleteLegislator: (where: LegislatorWhereUniqueInput) => Legislator;
  deleteManyLegislators: (where?: LegislatorWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cosponsors_By_Party: (
    where?: Cosponsors_By_PartySubscriptionWhereInput
  ) => Cosponsors_By_PartySubscriptionPayloadSubscription;
  bill: (
    where?: BillSubscriptionWhereInput
  ) => BillSubscriptionPayloadSubscription;
  summary: (
    where?: SummarySubscriptionWhereInput
  ) => SummarySubscriptionPayloadSubscription;
  sector: (
    where?: SectorSubscriptionWhereInput
  ) => SectorSubscriptionPayloadSubscription;
  industry: (
    where?: IndustrySubscriptionWhereInput
  ) => IndustrySubscriptionPayloadSubscription;
  contributor: (
    where?: ContributorSubscriptionWhereInput
  ) => ContributorSubscriptionPayloadSubscription;
  legislator: (
    where?: LegislatorSubscriptionWhereInput
  ) => LegislatorSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BillOrderByInput =
  | "bill_id_ASC"
  | "bill_id_DESC"
  | "bill_type_ASC"
  | "bill_type_DESC"
  | "title_ASC"
  | "title_DESC"
  | "short_title_ASC"
  | "short_title_DESC"
  | "sponsor_id_ASC"
  | "sponsor_id_DESC"
  | "sponsor_name_ASC"
  | "sponsor_name_DESC"
  | "sponsor_state_ASC"
  | "sponsor_state_DESC"
  | "sponsor_party_ASC"
  | "sponsor_party_DESC"
  | "house_passage_ASC"
  | "house_passage_DESC"
  | "senate_passage_ASC"
  | "senate_passage_DESC"
  | "enacted_ASC"
  | "enacted_DESC"
  | "vetoed_ASC"
  | "vetoed_DESC"
  | "cosponsors_ASC"
  | "cosponsors_DESC"
  | "committees_ASC"
  | "committees_DESC"
  | "primary_subject_ASC"
  | "primary_subject_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type SummaryOrderByInput =
  | "total_ASC"
  | "total_DESC"
  | "spent_ASC"
  | "spent_DESC"
  | "cash_on_hand_ASC"
  | "cash_on_hand_DESC"
  | "debt_ASC"
  | "debt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SectorOrderByInput =
  | "sector_name_ASC"
  | "sector_name_DESC"
  | "sector_code_ASC"
  | "sector_code_DESC"
  | "indivs_ASC"
  | "indivs_DESC"
  | "pacs_ASC"
  | "pacs_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Cosponsors_By_PartyOrderByInput =
  | "D_ASC"
  | "D_DESC"
  | "I_ASC"
  | "I_DESC"
  | "R_ASC"
  | "R_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IndustryOrderByInput =
  | "industry_name_ASC"
  | "industry_name_DESC"
  | "industry_code_ASC"
  | "industry_code_DESC"
  | "indivs_ASC"
  | "indivs_DESC"
  | "pacs_ASC"
  | "pacs_DESC"
  | "total_ASC"
  | "total_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ContributorOrderByInput =
  | "org_name_ASC"
  | "org_name_DESC"
  | "indivs_ASC"
  | "indivs_DESC"
  | "pacs_ASC"
  | "pacs_DESC"
  | "total_ASC"
  | "total_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LegislatorOrderByInput =
  | "bio_id_ASC"
  | "bio_id_DESC"
  | "short_title_ASC"
  | "short_title_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "middle_name_ASC"
  | "middle_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "suffix_ASC"
  | "suffix_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "party_ASC"
  | "party_DESC"
  | "twitter_account_ASC"
  | "twitter_account_DESC"
  | "facebook_account_ASC"
  | "facebook_account_DESC"
  | "youtube_account_ASC"
  | "youtube_account_DESC"
  | "govtrack_id_ASC"
  | "govtrack_id_DESC"
  | "cspan_id_ASC"
  | "cspan_id_DESC"
  | "votesmart_id_ASC"
  | "votesmart_id_DESC"
  | "icpsr_id_ASC"
  | "icpsr_id_DESC"
  | "crp_id_ASC"
  | "crp_id_DESC"
  | "fec_candidate_id_ASC"
  | "fec_candidate_id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "rss_url_ASC"
  | "rss_url_DESC"
  | "contact_form_ASC"
  | "contact_form_DESC"
  | "in_office_ASC"
  | "in_office_DESC"
  | "next_election_ASC"
  | "next_election_DESC"
  | "total_votes_ASC"
  | "total_votes_DESC"
  | "missed_votes_ASC"
  | "missed_votes_DESC"
  | "total_present_ASC"
  | "total_present_DESC"
  | "office_ASC"
  | "office_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "fax_ASC"
  | "fax_DESC"
  | "state_ASC"
  | "state_DESC"
  | "state_rank_ASC"
  | "state_rank_DESC"
  | "lis_id_ASC"
  | "lis_id_DESC"
  | "missed_votes_pct_ASC"
  | "missed_votes_pct_DESC"
  | "votes_with_party_pct_ASC"
  | "votes_with_party_pct_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface IndustryCreateManyInput {
  create?: IndustryCreateInput[] | IndustryCreateInput;
}

export interface BillCreateInput {
  bill_id: ID_Input;
  bill_type?: String;
  title: String;
  short_title?: String;
  sponsor_id?: String;
  sponsor_name?: String;
  sponsor_state?: String;
  sponsor_party?: String;
  house_passage?: Boolean;
  senate_passage?: Boolean;
  enacted?: Boolean;
  vetoed?: Boolean;
  cosponsors?: Int;
  cosponsors_by_party?: Cosponsors_By_PartyCreateOneInput;
  committees?: String;
  primary_subject: String;
}

export interface ContributorUpdateInput {
  org_name?: ID_Input;
  indivs?: String;
  pacs?: String;
  total?: String;
}

export interface Cosponsors_By_PartyWhereInput {
  D?: Int;
  D_not?: Int;
  D_in?: Int[] | Int;
  D_not_in?: Int[] | Int;
  D_lt?: Int;
  D_lte?: Int;
  D_gt?: Int;
  D_gte?: Int;
  I?: Int;
  I_not?: Int;
  I_in?: Int[] | Int;
  I_not_in?: Int[] | Int;
  I_lt?: Int;
  I_lte?: Int;
  I_gt?: Int;
  I_gte?: Int;
  R?: Int;
  R_not?: Int;
  R_in?: Int[] | Int;
  R_not_in?: Int[] | Int;
  R_lt?: Int;
  R_lte?: Int;
  R_gt?: Int;
  R_gte?: Int;
  AND?: Cosponsors_By_PartyWhereInput[] | Cosponsors_By_PartyWhereInput;
  OR?: Cosponsors_By_PartyWhereInput[] | Cosponsors_By_PartyWhereInput;
  NOT?: Cosponsors_By_PartyWhereInput[] | Cosponsors_By_PartyWhereInput;
}

export interface ContributorCreateInput {
  org_name: ID_Input;
  indivs?: String;
  pacs?: String;
  total?: String;
}

export interface Cosponsors_By_PartySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Cosponsors_By_PartyWhereInput;
  AND?:
    | Cosponsors_By_PartySubscriptionWhereInput[]
    | Cosponsors_By_PartySubscriptionWhereInput;
  OR?:
    | Cosponsors_By_PartySubscriptionWhereInput[]
    | Cosponsors_By_PartySubscriptionWhereInput;
  NOT?:
    | Cosponsors_By_PartySubscriptionWhereInput[]
    | Cosponsors_By_PartySubscriptionWhereInput;
}

export interface ContributorWhereInput {
  org_name?: ID_Input;
  org_name_not?: ID_Input;
  org_name_in?: ID_Input[] | ID_Input;
  org_name_not_in?: ID_Input[] | ID_Input;
  org_name_lt?: ID_Input;
  org_name_lte?: ID_Input;
  org_name_gt?: ID_Input;
  org_name_gte?: ID_Input;
  org_name_contains?: ID_Input;
  org_name_not_contains?: ID_Input;
  org_name_starts_with?: ID_Input;
  org_name_not_starts_with?: ID_Input;
  org_name_ends_with?: ID_Input;
  org_name_not_ends_with?: ID_Input;
  indivs?: String;
  indivs_not?: String;
  indivs_in?: String[] | String;
  indivs_not_in?: String[] | String;
  indivs_lt?: String;
  indivs_lte?: String;
  indivs_gt?: String;
  indivs_gte?: String;
  indivs_contains?: String;
  indivs_not_contains?: String;
  indivs_starts_with?: String;
  indivs_not_starts_with?: String;
  indivs_ends_with?: String;
  indivs_not_ends_with?: String;
  pacs?: String;
  pacs_not?: String;
  pacs_in?: String[] | String;
  pacs_not_in?: String[] | String;
  pacs_lt?: String;
  pacs_lte?: String;
  pacs_gt?: String;
  pacs_gte?: String;
  pacs_contains?: String;
  pacs_not_contains?: String;
  pacs_starts_with?: String;
  pacs_not_starts_with?: String;
  pacs_ends_with?: String;
  pacs_not_ends_with?: String;
  total?: String;
  total_not?: String;
  total_in?: String[] | String;
  total_not_in?: String[] | String;
  total_lt?: String;
  total_lte?: String;
  total_gt?: String;
  total_gte?: String;
  total_contains?: String;
  total_not_contains?: String;
  total_starts_with?: String;
  total_not_starts_with?: String;
  total_ends_with?: String;
  total_not_ends_with?: String;
  AND?: ContributorWhereInput[] | ContributorWhereInput;
  OR?: ContributorWhereInput[] | ContributorWhereInput;
  NOT?: ContributorWhereInput[] | ContributorWhereInput;
}

export interface SummaryUpsertNestedInput {
  update: SummaryUpdateDataInput;
  create: SummaryCreateInput;
}

export interface ContributorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ContributorWhereInput;
  AND?: ContributorSubscriptionWhereInput[] | ContributorSubscriptionWhereInput;
  OR?: ContributorSubscriptionWhereInput[] | ContributorSubscriptionWhereInput;
  NOT?: ContributorSubscriptionWhereInput[] | ContributorSubscriptionWhereInput;
}

export interface SummaryUpdateOneInput {
  create?: SummaryCreateInput;
  update?: SummaryUpdateDataInput;
  upsert?: SummaryUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface IndustryUpdateInput {
  industry_name?: String;
  industry_code?: ID_Input;
  indivs?: String;
  pacs?: String;
  total?: String;
}

export interface SummaryWhereInput {
  total?: String;
  total_not?: String;
  total_in?: String[] | String;
  total_not_in?: String[] | String;
  total_lt?: String;
  total_lte?: String;
  total_gt?: String;
  total_gte?: String;
  total_contains?: String;
  total_not_contains?: String;
  total_starts_with?: String;
  total_not_starts_with?: String;
  total_ends_with?: String;
  total_not_ends_with?: String;
  spent?: String;
  spent_not?: String;
  spent_in?: String[] | String;
  spent_not_in?: String[] | String;
  spent_lt?: String;
  spent_lte?: String;
  spent_gt?: String;
  spent_gte?: String;
  spent_contains?: String;
  spent_not_contains?: String;
  spent_starts_with?: String;
  spent_not_starts_with?: String;
  spent_ends_with?: String;
  spent_not_ends_with?: String;
  cash_on_hand?: String;
  cash_on_hand_not?: String;
  cash_on_hand_in?: String[] | String;
  cash_on_hand_not_in?: String[] | String;
  cash_on_hand_lt?: String;
  cash_on_hand_lte?: String;
  cash_on_hand_gt?: String;
  cash_on_hand_gte?: String;
  cash_on_hand_contains?: String;
  cash_on_hand_not_contains?: String;
  cash_on_hand_starts_with?: String;
  cash_on_hand_not_starts_with?: String;
  cash_on_hand_ends_with?: String;
  cash_on_hand_not_ends_with?: String;
  debt?: String;
  debt_not?: String;
  debt_in?: String[] | String;
  debt_not_in?: String[] | String;
  debt_lt?: String;
  debt_lte?: String;
  debt_gt?: String;
  debt_gte?: String;
  debt_contains?: String;
  debt_not_contains?: String;
  debt_starts_with?: String;
  debt_not_starts_with?: String;
  debt_ends_with?: String;
  debt_not_ends_with?: String;
  AND?: SummaryWhereInput[] | SummaryWhereInput;
  OR?: SummaryWhereInput[] | SummaryWhereInput;
  NOT?: SummaryWhereInput[] | SummaryWhereInput;
}

export interface IndustryCreateInput {
  industry_name: String;
  industry_code: ID_Input;
  indivs?: String;
  pacs?: String;
  total?: String;
}

export interface SectorUpdateManyInput {
  create?: SectorCreateInput[] | SectorCreateInput;
}

export interface SectorUpdateInput {
  sector_name?: String;
  sector_code?: ID_Input;
  indivs?: String;
  pacs?: String;
}

export interface BillUpdateManyInput {
  create?: BillCreateInput[] | BillCreateInput;
}

export interface SectorCreateInput {
  sector_name: String;
  sector_code: ID_Input;
  indivs?: String;
  pacs?: String;
}

export interface SectorWhereInput {
  sector_name?: String;
  sector_name_not?: String;
  sector_name_in?: String[] | String;
  sector_name_not_in?: String[] | String;
  sector_name_lt?: String;
  sector_name_lte?: String;
  sector_name_gt?: String;
  sector_name_gte?: String;
  sector_name_contains?: String;
  sector_name_not_contains?: String;
  sector_name_starts_with?: String;
  sector_name_not_starts_with?: String;
  sector_name_ends_with?: String;
  sector_name_not_ends_with?: String;
  sector_code?: ID_Input;
  sector_code_not?: ID_Input;
  sector_code_in?: ID_Input[] | ID_Input;
  sector_code_not_in?: ID_Input[] | ID_Input;
  sector_code_lt?: ID_Input;
  sector_code_lte?: ID_Input;
  sector_code_gt?: ID_Input;
  sector_code_gte?: ID_Input;
  sector_code_contains?: ID_Input;
  sector_code_not_contains?: ID_Input;
  sector_code_starts_with?: ID_Input;
  sector_code_not_starts_with?: ID_Input;
  sector_code_ends_with?: ID_Input;
  sector_code_not_ends_with?: ID_Input;
  indivs?: String;
  indivs_not?: String;
  indivs_in?: String[] | String;
  indivs_not_in?: String[] | String;
  indivs_lt?: String;
  indivs_lte?: String;
  indivs_gt?: String;
  indivs_gte?: String;
  indivs_contains?: String;
  indivs_not_contains?: String;
  indivs_starts_with?: String;
  indivs_not_starts_with?: String;
  indivs_ends_with?: String;
  indivs_not_ends_with?: String;
  pacs?: String;
  pacs_not?: String;
  pacs_in?: String[] | String;
  pacs_not_in?: String[] | String;
  pacs_lt?: String;
  pacs_lte?: String;
  pacs_gt?: String;
  pacs_gte?: String;
  pacs_contains?: String;
  pacs_not_contains?: String;
  pacs_starts_with?: String;
  pacs_not_starts_with?: String;
  pacs_ends_with?: String;
  pacs_not_ends_with?: String;
  AND?: SectorWhereInput[] | SectorWhereInput;
  OR?: SectorWhereInput[] | SectorWhereInput;
  NOT?: SectorWhereInput[] | SectorWhereInput;
}

export type LegislatorWhereUniqueInput = AtLeastOne<{
  bio_id: ID_Input;
}>;

export interface SummaryCreateOneInput {
  create?: SummaryCreateInput;
}

export interface SummaryUpdateInput {
  total?: String;
  spent?: String;
  cash_on_hand?: String;
  debt?: String;
}

export interface SectorCreateManyInput {
  create?: SectorCreateInput[] | SectorCreateInput;
}

export interface SummaryCreateInput {
  total?: String;
  spent?: String;
  cash_on_hand?: String;
  debt?: String;
}

export interface IndustryWhereInput {
  industry_name?: String;
  industry_name_not?: String;
  industry_name_in?: String[] | String;
  industry_name_not_in?: String[] | String;
  industry_name_lt?: String;
  industry_name_lte?: String;
  industry_name_gt?: String;
  industry_name_gte?: String;
  industry_name_contains?: String;
  industry_name_not_contains?: String;
  industry_name_starts_with?: String;
  industry_name_not_starts_with?: String;
  industry_name_ends_with?: String;
  industry_name_not_ends_with?: String;
  industry_code?: ID_Input;
  industry_code_not?: ID_Input;
  industry_code_in?: ID_Input[] | ID_Input;
  industry_code_not_in?: ID_Input[] | ID_Input;
  industry_code_lt?: ID_Input;
  industry_code_lte?: ID_Input;
  industry_code_gt?: ID_Input;
  industry_code_gte?: ID_Input;
  industry_code_contains?: ID_Input;
  industry_code_not_contains?: ID_Input;
  industry_code_starts_with?: ID_Input;
  industry_code_not_starts_with?: ID_Input;
  industry_code_ends_with?: ID_Input;
  industry_code_not_ends_with?: ID_Input;
  indivs?: String;
  indivs_not?: String;
  indivs_in?: String[] | String;
  indivs_not_in?: String[] | String;
  indivs_lt?: String;
  indivs_lte?: String;
  indivs_gt?: String;
  indivs_gte?: String;
  indivs_contains?: String;
  indivs_not_contains?: String;
  indivs_starts_with?: String;
  indivs_not_starts_with?: String;
  indivs_ends_with?: String;
  indivs_not_ends_with?: String;
  pacs?: String;
  pacs_not?: String;
  pacs_in?: String[] | String;
  pacs_not_in?: String[] | String;
  pacs_lt?: String;
  pacs_lte?: String;
  pacs_gt?: String;
  pacs_gte?: String;
  pacs_contains?: String;
  pacs_not_contains?: String;
  pacs_starts_with?: String;
  pacs_not_starts_with?: String;
  pacs_ends_with?: String;
  pacs_not_ends_with?: String;
  total?: String;
  total_not?: String;
  total_in?: String[] | String;
  total_not_in?: String[] | String;
  total_lt?: String;
  total_lte?: String;
  total_gt?: String;
  total_gte?: String;
  total_contains?: String;
  total_not_contains?: String;
  total_starts_with?: String;
  total_not_starts_with?: String;
  total_ends_with?: String;
  total_not_ends_with?: String;
  AND?: IndustryWhereInput[] | IndustryWhereInput;
  OR?: IndustryWhereInput[] | IndustryWhereInput;
  NOT?: IndustryWhereInput[] | IndustryWhereInput;
}

export interface LegislatorWhereInput {
  bio_id?: ID_Input;
  bio_id_not?: ID_Input;
  bio_id_in?: ID_Input[] | ID_Input;
  bio_id_not_in?: ID_Input[] | ID_Input;
  bio_id_lt?: ID_Input;
  bio_id_lte?: ID_Input;
  bio_id_gt?: ID_Input;
  bio_id_gte?: ID_Input;
  bio_id_contains?: ID_Input;
  bio_id_not_contains?: ID_Input;
  bio_id_starts_with?: ID_Input;
  bio_id_not_starts_with?: ID_Input;
  bio_id_ends_with?: ID_Input;
  bio_id_not_ends_with?: ID_Input;
  short_title?: String;
  short_title_not?: String;
  short_title_in?: String[] | String;
  short_title_not_in?: String[] | String;
  short_title_lt?: String;
  short_title_lte?: String;
  short_title_gt?: String;
  short_title_gte?: String;
  short_title_contains?: String;
  short_title_not_contains?: String;
  short_title_starts_with?: String;
  short_title_not_starts_with?: String;
  short_title_ends_with?: String;
  short_title_not_ends_with?: String;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  middle_name?: String;
  middle_name_not?: String;
  middle_name_in?: String[] | String;
  middle_name_not_in?: String[] | String;
  middle_name_lt?: String;
  middle_name_lte?: String;
  middle_name_gt?: String;
  middle_name_gte?: String;
  middle_name_contains?: String;
  middle_name_not_contains?: String;
  middle_name_starts_with?: String;
  middle_name_not_starts_with?: String;
  middle_name_ends_with?: String;
  middle_name_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  suffix?: String;
  suffix_not?: String;
  suffix_in?: String[] | String;
  suffix_not_in?: String[] | String;
  suffix_lt?: String;
  suffix_lte?: String;
  suffix_gt?: String;
  suffix_gte?: String;
  suffix_contains?: String;
  suffix_not_contains?: String;
  suffix_starts_with?: String;
  suffix_not_starts_with?: String;
  suffix_ends_with?: String;
  suffix_not_ends_with?: String;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  party?: String;
  party_not?: String;
  party_in?: String[] | String;
  party_not_in?: String[] | String;
  party_lt?: String;
  party_lte?: String;
  party_gt?: String;
  party_gte?: String;
  party_contains?: String;
  party_not_contains?: String;
  party_starts_with?: String;
  party_not_starts_with?: String;
  party_ends_with?: String;
  party_not_ends_with?: String;
  twitter_account?: String;
  twitter_account_not?: String;
  twitter_account_in?: String[] | String;
  twitter_account_not_in?: String[] | String;
  twitter_account_lt?: String;
  twitter_account_lte?: String;
  twitter_account_gt?: String;
  twitter_account_gte?: String;
  twitter_account_contains?: String;
  twitter_account_not_contains?: String;
  twitter_account_starts_with?: String;
  twitter_account_not_starts_with?: String;
  twitter_account_ends_with?: String;
  twitter_account_not_ends_with?: String;
  facebook_account?: String;
  facebook_account_not?: String;
  facebook_account_in?: String[] | String;
  facebook_account_not_in?: String[] | String;
  facebook_account_lt?: String;
  facebook_account_lte?: String;
  facebook_account_gt?: String;
  facebook_account_gte?: String;
  facebook_account_contains?: String;
  facebook_account_not_contains?: String;
  facebook_account_starts_with?: String;
  facebook_account_not_starts_with?: String;
  facebook_account_ends_with?: String;
  facebook_account_not_ends_with?: String;
  youtube_account?: String;
  youtube_account_not?: String;
  youtube_account_in?: String[] | String;
  youtube_account_not_in?: String[] | String;
  youtube_account_lt?: String;
  youtube_account_lte?: String;
  youtube_account_gt?: String;
  youtube_account_gte?: String;
  youtube_account_contains?: String;
  youtube_account_not_contains?: String;
  youtube_account_starts_with?: String;
  youtube_account_not_starts_with?: String;
  youtube_account_ends_with?: String;
  youtube_account_not_ends_with?: String;
  govtrack_id?: String;
  govtrack_id_not?: String;
  govtrack_id_in?: String[] | String;
  govtrack_id_not_in?: String[] | String;
  govtrack_id_lt?: String;
  govtrack_id_lte?: String;
  govtrack_id_gt?: String;
  govtrack_id_gte?: String;
  govtrack_id_contains?: String;
  govtrack_id_not_contains?: String;
  govtrack_id_starts_with?: String;
  govtrack_id_not_starts_with?: String;
  govtrack_id_ends_with?: String;
  govtrack_id_not_ends_with?: String;
  cspan_id?: String;
  cspan_id_not?: String;
  cspan_id_in?: String[] | String;
  cspan_id_not_in?: String[] | String;
  cspan_id_lt?: String;
  cspan_id_lte?: String;
  cspan_id_gt?: String;
  cspan_id_gte?: String;
  cspan_id_contains?: String;
  cspan_id_not_contains?: String;
  cspan_id_starts_with?: String;
  cspan_id_not_starts_with?: String;
  cspan_id_ends_with?: String;
  cspan_id_not_ends_with?: String;
  votesmart_id?: String;
  votesmart_id_not?: String;
  votesmart_id_in?: String[] | String;
  votesmart_id_not_in?: String[] | String;
  votesmart_id_lt?: String;
  votesmart_id_lte?: String;
  votesmart_id_gt?: String;
  votesmart_id_gte?: String;
  votesmart_id_contains?: String;
  votesmart_id_not_contains?: String;
  votesmart_id_starts_with?: String;
  votesmart_id_not_starts_with?: String;
  votesmart_id_ends_with?: String;
  votesmart_id_not_ends_with?: String;
  icpsr_id?: String;
  icpsr_id_not?: String;
  icpsr_id_in?: String[] | String;
  icpsr_id_not_in?: String[] | String;
  icpsr_id_lt?: String;
  icpsr_id_lte?: String;
  icpsr_id_gt?: String;
  icpsr_id_gte?: String;
  icpsr_id_contains?: String;
  icpsr_id_not_contains?: String;
  icpsr_id_starts_with?: String;
  icpsr_id_not_starts_with?: String;
  icpsr_id_ends_with?: String;
  icpsr_id_not_ends_with?: String;
  crp_id?: String;
  crp_id_not?: String;
  crp_id_in?: String[] | String;
  crp_id_not_in?: String[] | String;
  crp_id_lt?: String;
  crp_id_lte?: String;
  crp_id_gt?: String;
  crp_id_gte?: String;
  crp_id_contains?: String;
  crp_id_not_contains?: String;
  crp_id_starts_with?: String;
  crp_id_not_starts_with?: String;
  crp_id_ends_with?: String;
  crp_id_not_ends_with?: String;
  fec_candidate_id?: String;
  fec_candidate_id_not?: String;
  fec_candidate_id_in?: String[] | String;
  fec_candidate_id_not_in?: String[] | String;
  fec_candidate_id_lt?: String;
  fec_candidate_id_lte?: String;
  fec_candidate_id_gt?: String;
  fec_candidate_id_gte?: String;
  fec_candidate_id_contains?: String;
  fec_candidate_id_not_contains?: String;
  fec_candidate_id_starts_with?: String;
  fec_candidate_id_not_starts_with?: String;
  fec_candidate_id_ends_with?: String;
  fec_candidate_id_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  rss_url?: String;
  rss_url_not?: String;
  rss_url_in?: String[] | String;
  rss_url_not_in?: String[] | String;
  rss_url_lt?: String;
  rss_url_lte?: String;
  rss_url_gt?: String;
  rss_url_gte?: String;
  rss_url_contains?: String;
  rss_url_not_contains?: String;
  rss_url_starts_with?: String;
  rss_url_not_starts_with?: String;
  rss_url_ends_with?: String;
  rss_url_not_ends_with?: String;
  contact_form?: String;
  contact_form_not?: String;
  contact_form_in?: String[] | String;
  contact_form_not_in?: String[] | String;
  contact_form_lt?: String;
  contact_form_lte?: String;
  contact_form_gt?: String;
  contact_form_gte?: String;
  contact_form_contains?: String;
  contact_form_not_contains?: String;
  contact_form_starts_with?: String;
  contact_form_not_starts_with?: String;
  contact_form_ends_with?: String;
  contact_form_not_ends_with?: String;
  in_office?: Boolean;
  in_office_not?: Boolean;
  next_election?: String;
  next_election_not?: String;
  next_election_in?: String[] | String;
  next_election_not_in?: String[] | String;
  next_election_lt?: String;
  next_election_lte?: String;
  next_election_gt?: String;
  next_election_gte?: String;
  next_election_contains?: String;
  next_election_not_contains?: String;
  next_election_starts_with?: String;
  next_election_not_starts_with?: String;
  next_election_ends_with?: String;
  next_election_not_ends_with?: String;
  total_votes?: Int;
  total_votes_not?: Int;
  total_votes_in?: Int[] | Int;
  total_votes_not_in?: Int[] | Int;
  total_votes_lt?: Int;
  total_votes_lte?: Int;
  total_votes_gt?: Int;
  total_votes_gte?: Int;
  missed_votes?: Int;
  missed_votes_not?: Int;
  missed_votes_in?: Int[] | Int;
  missed_votes_not_in?: Int[] | Int;
  missed_votes_lt?: Int;
  missed_votes_lte?: Int;
  missed_votes_gt?: Int;
  missed_votes_gte?: Int;
  total_present?: Int;
  total_present_not?: Int;
  total_present_in?: Int[] | Int;
  total_present_not_in?: Int[] | Int;
  total_present_lt?: Int;
  total_present_lte?: Int;
  total_present_gt?: Int;
  total_present_gte?: Int;
  office?: String;
  office_not?: String;
  office_in?: String[] | String;
  office_not_in?: String[] | String;
  office_lt?: String;
  office_lte?: String;
  office_gt?: String;
  office_gte?: String;
  office_contains?: String;
  office_not_contains?: String;
  office_starts_with?: String;
  office_not_starts_with?: String;
  office_ends_with?: String;
  office_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  fax?: String;
  fax_not?: String;
  fax_in?: String[] | String;
  fax_not_in?: String[] | String;
  fax_lt?: String;
  fax_lte?: String;
  fax_gt?: String;
  fax_gte?: String;
  fax_contains?: String;
  fax_not_contains?: String;
  fax_starts_with?: String;
  fax_not_starts_with?: String;
  fax_ends_with?: String;
  fax_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  state_rank?: String;
  state_rank_not?: String;
  state_rank_in?: String[] | String;
  state_rank_not_in?: String[] | String;
  state_rank_lt?: String;
  state_rank_lte?: String;
  state_rank_gt?: String;
  state_rank_gte?: String;
  state_rank_contains?: String;
  state_rank_not_contains?: String;
  state_rank_starts_with?: String;
  state_rank_not_starts_with?: String;
  state_rank_ends_with?: String;
  state_rank_not_ends_with?: String;
  lis_id?: String;
  lis_id_not?: String;
  lis_id_in?: String[] | String;
  lis_id_not_in?: String[] | String;
  lis_id_lt?: String;
  lis_id_lte?: String;
  lis_id_gt?: String;
  lis_id_gte?: String;
  lis_id_contains?: String;
  lis_id_not_contains?: String;
  lis_id_starts_with?: String;
  lis_id_not_starts_with?: String;
  lis_id_ends_with?: String;
  lis_id_not_ends_with?: String;
  missed_votes_pct?: Float;
  missed_votes_pct_not?: Float;
  missed_votes_pct_in?: Float[] | Float;
  missed_votes_pct_not_in?: Float[] | Float;
  missed_votes_pct_lt?: Float;
  missed_votes_pct_lte?: Float;
  missed_votes_pct_gt?: Float;
  missed_votes_pct_gte?: Float;
  votes_with_party_pct?: Float;
  votes_with_party_pct_not?: Float;
  votes_with_party_pct_in?: Float[] | Float;
  votes_with_party_pct_not_in?: Float[] | Float;
  votes_with_party_pct_lt?: Float;
  votes_with_party_pct_lte?: Float;
  votes_with_party_pct_gt?: Float;
  votes_with_party_pct_gte?: Float;
  bills_every?: BillWhereInput;
  bills_some?: BillWhereInput;
  bills_none?: BillWhereInput;
  industries_every?: IndustryWhereInput;
  industries_some?: IndustryWhereInput;
  industries_none?: IndustryWhereInput;
  sectors_every?: SectorWhereInput;
  sectors_some?: SectorWhereInput;
  sectors_none?: SectorWhereInput;
  contributors_every?: ContributorWhereInput;
  contributors_some?: ContributorWhereInput;
  contributors_none?: ContributorWhereInput;
  summary?: SummaryWhereInput;
  AND?: LegislatorWhereInput[] | LegislatorWhereInput;
  OR?: LegislatorWhereInput[] | LegislatorWhereInput;
  NOT?: LegislatorWhereInput[] | LegislatorWhereInput;
}

export interface BillCreateManyInput {
  create?: BillCreateInput[] | BillCreateInput;
}

export interface LegislatorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LegislatorWhereInput;
  AND?: LegislatorSubscriptionWhereInput[] | LegislatorSubscriptionWhereInput;
  OR?: LegislatorSubscriptionWhereInput[] | LegislatorSubscriptionWhereInput;
  NOT?: LegislatorSubscriptionWhereInput[] | LegislatorSubscriptionWhereInput;
}

export interface BillWhereInput {
  bill_id?: ID_Input;
  bill_id_not?: ID_Input;
  bill_id_in?: ID_Input[] | ID_Input;
  bill_id_not_in?: ID_Input[] | ID_Input;
  bill_id_lt?: ID_Input;
  bill_id_lte?: ID_Input;
  bill_id_gt?: ID_Input;
  bill_id_gte?: ID_Input;
  bill_id_contains?: ID_Input;
  bill_id_not_contains?: ID_Input;
  bill_id_starts_with?: ID_Input;
  bill_id_not_starts_with?: ID_Input;
  bill_id_ends_with?: ID_Input;
  bill_id_not_ends_with?: ID_Input;
  bill_type?: String;
  bill_type_not?: String;
  bill_type_in?: String[] | String;
  bill_type_not_in?: String[] | String;
  bill_type_lt?: String;
  bill_type_lte?: String;
  bill_type_gt?: String;
  bill_type_gte?: String;
  bill_type_contains?: String;
  bill_type_not_contains?: String;
  bill_type_starts_with?: String;
  bill_type_not_starts_with?: String;
  bill_type_ends_with?: String;
  bill_type_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  short_title?: String;
  short_title_not?: String;
  short_title_in?: String[] | String;
  short_title_not_in?: String[] | String;
  short_title_lt?: String;
  short_title_lte?: String;
  short_title_gt?: String;
  short_title_gte?: String;
  short_title_contains?: String;
  short_title_not_contains?: String;
  short_title_starts_with?: String;
  short_title_not_starts_with?: String;
  short_title_ends_with?: String;
  short_title_not_ends_with?: String;
  sponsor_id?: String;
  sponsor_id_not?: String;
  sponsor_id_in?: String[] | String;
  sponsor_id_not_in?: String[] | String;
  sponsor_id_lt?: String;
  sponsor_id_lte?: String;
  sponsor_id_gt?: String;
  sponsor_id_gte?: String;
  sponsor_id_contains?: String;
  sponsor_id_not_contains?: String;
  sponsor_id_starts_with?: String;
  sponsor_id_not_starts_with?: String;
  sponsor_id_ends_with?: String;
  sponsor_id_not_ends_with?: String;
  sponsor_name?: String;
  sponsor_name_not?: String;
  sponsor_name_in?: String[] | String;
  sponsor_name_not_in?: String[] | String;
  sponsor_name_lt?: String;
  sponsor_name_lte?: String;
  sponsor_name_gt?: String;
  sponsor_name_gte?: String;
  sponsor_name_contains?: String;
  sponsor_name_not_contains?: String;
  sponsor_name_starts_with?: String;
  sponsor_name_not_starts_with?: String;
  sponsor_name_ends_with?: String;
  sponsor_name_not_ends_with?: String;
  sponsor_state?: String;
  sponsor_state_not?: String;
  sponsor_state_in?: String[] | String;
  sponsor_state_not_in?: String[] | String;
  sponsor_state_lt?: String;
  sponsor_state_lte?: String;
  sponsor_state_gt?: String;
  sponsor_state_gte?: String;
  sponsor_state_contains?: String;
  sponsor_state_not_contains?: String;
  sponsor_state_starts_with?: String;
  sponsor_state_not_starts_with?: String;
  sponsor_state_ends_with?: String;
  sponsor_state_not_ends_with?: String;
  sponsor_party?: String;
  sponsor_party_not?: String;
  sponsor_party_in?: String[] | String;
  sponsor_party_not_in?: String[] | String;
  sponsor_party_lt?: String;
  sponsor_party_lte?: String;
  sponsor_party_gt?: String;
  sponsor_party_gte?: String;
  sponsor_party_contains?: String;
  sponsor_party_not_contains?: String;
  sponsor_party_starts_with?: String;
  sponsor_party_not_starts_with?: String;
  sponsor_party_ends_with?: String;
  sponsor_party_not_ends_with?: String;
  house_passage?: Boolean;
  house_passage_not?: Boolean;
  senate_passage?: Boolean;
  senate_passage_not?: Boolean;
  enacted?: Boolean;
  enacted_not?: Boolean;
  vetoed?: Boolean;
  vetoed_not?: Boolean;
  cosponsors?: Int;
  cosponsors_not?: Int;
  cosponsors_in?: Int[] | Int;
  cosponsors_not_in?: Int[] | Int;
  cosponsors_lt?: Int;
  cosponsors_lte?: Int;
  cosponsors_gt?: Int;
  cosponsors_gte?: Int;
  cosponsors_by_party?: Cosponsors_By_PartyWhereInput;
  committees?: String;
  committees_not?: String;
  committees_in?: String[] | String;
  committees_not_in?: String[] | String;
  committees_lt?: String;
  committees_lte?: String;
  committees_gt?: String;
  committees_gte?: String;
  committees_contains?: String;
  committees_not_contains?: String;
  committees_starts_with?: String;
  committees_not_starts_with?: String;
  committees_ends_with?: String;
  committees_not_ends_with?: String;
  primary_subject?: String;
  primary_subject_not?: String;
  primary_subject_in?: String[] | String;
  primary_subject_not_in?: String[] | String;
  primary_subject_lt?: String;
  primary_subject_lte?: String;
  primary_subject_gt?: String;
  primary_subject_gte?: String;
  primary_subject_contains?: String;
  primary_subject_not_contains?: String;
  primary_subject_starts_with?: String;
  primary_subject_not_starts_with?: String;
  primary_subject_ends_with?: String;
  primary_subject_not_ends_with?: String;
  AND?: BillWhereInput[] | BillWhereInput;
  OR?: BillWhereInput[] | BillWhereInput;
  NOT?: BillWhereInput[] | BillWhereInput;
}

export interface Cosponsors_By_PartyUpsertNestedInput {
  update: Cosponsors_By_PartyUpdateDataInput;
  create: Cosponsors_By_PartyCreateInput;
}

export interface ContributorUpdateManyInput {
  create?: ContributorCreateInput[] | ContributorCreateInput;
}

export interface Cosponsors_By_PartyUpdateDataInput {
  D?: Int;
  I?: Int;
  R?: Int;
}

export interface IndustryUpdateManyInput {
  create?: IndustryCreateInput[] | IndustryCreateInput;
}

export interface Cosponsors_By_PartyUpdateOneInput {
  create?: Cosponsors_By_PartyCreateInput;
  update?: Cosponsors_By_PartyUpdateDataInput;
  upsert?: Cosponsors_By_PartyUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface SummarySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SummaryWhereInput;
  AND?: SummarySubscriptionWhereInput[] | SummarySubscriptionWhereInput;
  OR?: SummarySubscriptionWhereInput[] | SummarySubscriptionWhereInput;
  NOT?: SummarySubscriptionWhereInput[] | SummarySubscriptionWhereInput;
}

export interface SectorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SectorWhereInput;
  AND?: SectorSubscriptionWhereInput[] | SectorSubscriptionWhereInput;
  OR?: SectorSubscriptionWhereInput[] | SectorSubscriptionWhereInput;
  NOT?: SectorSubscriptionWhereInput[] | SectorSubscriptionWhereInput;
}

export interface LegislatorCreateInput {
  bio_id: ID_Input;
  short_title?: String;
  first_name: String;
  middle_name?: String;
  last_name: String;
  suffix?: String;
  gender?: String;
  party?: String;
  twitter_account?: String;
  facebook_account?: String;
  youtube_account?: String;
  govtrack_id?: String;
  cspan_id?: String;
  votesmart_id?: String;
  icpsr_id?: String;
  crp_id: String;
  fec_candidate_id?: String;
  url?: String;
  rss_url?: String;
  contact_form?: String;
  in_office?: Boolean;
  next_election?: String;
  total_votes?: Int;
  missed_votes?: Int;
  total_present?: Int;
  office?: String;
  phone?: String;
  fax?: String;
  state?: String;
  state_rank?: String;
  lis_id?: String;
  missed_votes_pct?: Float;
  votes_with_party_pct?: Float;
  bills?: BillCreateManyInput;
  industries?: IndustryCreateManyInput;
  sectors?: SectorCreateManyInput;
  contributors?: ContributorCreateManyInput;
  summary?: SummaryCreateOneInput;
}

export interface Cosponsors_By_PartyCreateOneInput {
  create?: Cosponsors_By_PartyCreateInput;
}

export interface BillUpdateInput {
  bill_id?: ID_Input;
  bill_type?: String;
  title?: String;
  short_title?: String;
  sponsor_id?: String;
  sponsor_name?: String;
  sponsor_state?: String;
  sponsor_party?: String;
  house_passage?: Boolean;
  senate_passage?: Boolean;
  enacted?: Boolean;
  vetoed?: Boolean;
  cosponsors?: Int;
  cosponsors_by_party?: Cosponsors_By_PartyUpdateOneInput;
  committees?: String;
  primary_subject?: String;
}

export interface Cosponsors_By_PartyUpdateInput {
  D?: Int;
  I?: Int;
  R?: Int;
}

export interface Cosponsors_By_PartyCreateInput {
  D?: Int;
  I?: Int;
  R?: Int;
}

export interface SummaryUpdateDataInput {
  total?: String;
  spent?: String;
  cash_on_hand?: String;
  debt?: String;
}

export interface IndustrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IndustryWhereInput;
  AND?: IndustrySubscriptionWhereInput[] | IndustrySubscriptionWhereInput;
  OR?: IndustrySubscriptionWhereInput[] | IndustrySubscriptionWhereInput;
  NOT?: IndustrySubscriptionWhereInput[] | IndustrySubscriptionWhereInput;
}

export interface ContributorCreateManyInput {
  create?: ContributorCreateInput[] | ContributorCreateInput;
}

export interface LegislatorUpdateInput {
  bio_id?: ID_Input;
  short_title?: String;
  first_name?: String;
  middle_name?: String;
  last_name?: String;
  suffix?: String;
  gender?: String;
  party?: String;
  twitter_account?: String;
  facebook_account?: String;
  youtube_account?: String;
  govtrack_id?: String;
  cspan_id?: String;
  votesmart_id?: String;
  icpsr_id?: String;
  crp_id?: String;
  fec_candidate_id?: String;
  url?: String;
  rss_url?: String;
  contact_form?: String;
  in_office?: Boolean;
  next_election?: String;
  total_votes?: Int;
  missed_votes?: Int;
  total_present?: Int;
  office?: String;
  phone?: String;
  fax?: String;
  state?: String;
  state_rank?: String;
  lis_id?: String;
  missed_votes_pct?: Float;
  votes_with_party_pct?: Float;
  bills?: BillUpdateManyInput;
  industries?: IndustryUpdateManyInput;
  sectors?: SectorUpdateManyInput;
  contributors?: ContributorUpdateManyInput;
  summary?: SummaryUpdateOneInput;
}

export interface BillSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BillWhereInput;
  AND?: BillSubscriptionWhereInput[] | BillSubscriptionWhereInput;
  OR?: BillSubscriptionWhereInput[] | BillSubscriptionWhereInput;
  NOT?: BillSubscriptionWhereInput[] | BillSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BillEdgeNode {
  cursor: String;
}

export interface BillEdge extends Promise<BillEdgeNode>, Fragmentable {
  node: <T = Bill>() => T;
  cursor: () => Promise<String>;
}

export interface BillEdgeSubscription
  extends Promise<AsyncIterator<BillEdgeNode>>,
    Fragmentable {
  node: <T = BillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LegislatorPreviousValuesNode {
  bio_id: ID_Output;
  short_title?: String;
  first_name: String;
  middle_name?: String;
  last_name: String;
  suffix?: String;
  gender?: String;
  party?: String;
  twitter_account?: String;
  facebook_account?: String;
  youtube_account?: String;
  govtrack_id?: String;
  cspan_id?: String;
  votesmart_id?: String;
  icpsr_id?: String;
  crp_id: String;
  fec_candidate_id?: String;
  url?: String;
  rss_url?: String;
  contact_form?: String;
  in_office?: Boolean;
  next_election?: String;
  total_votes?: Int;
  missed_votes?: Int;
  total_present?: Int;
  office?: String;
  phone?: String;
  fax?: String;
  state?: String;
  state_rank?: String;
  lis_id?: String;
  missed_votes_pct?: Float;
  votes_with_party_pct?: Float;
}

export interface LegislatorPreviousValues
  extends Promise<LegislatorPreviousValuesNode>,
    Fragmentable {
  bio_id: () => Promise<ID_Output>;
  short_title: () => Promise<String>;
  first_name: () => Promise<String>;
  middle_name: () => Promise<String>;
  last_name: () => Promise<String>;
  suffix: () => Promise<String>;
  gender: () => Promise<String>;
  party: () => Promise<String>;
  twitter_account: () => Promise<String>;
  facebook_account: () => Promise<String>;
  youtube_account: () => Promise<String>;
  govtrack_id: () => Promise<String>;
  cspan_id: () => Promise<String>;
  votesmart_id: () => Promise<String>;
  icpsr_id: () => Promise<String>;
  crp_id: () => Promise<String>;
  fec_candidate_id: () => Promise<String>;
  url: () => Promise<String>;
  rss_url: () => Promise<String>;
  contact_form: () => Promise<String>;
  in_office: () => Promise<Boolean>;
  next_election: () => Promise<String>;
  total_votes: () => Promise<Int>;
  missed_votes: () => Promise<Int>;
  total_present: () => Promise<Int>;
  office: () => Promise<String>;
  phone: () => Promise<String>;
  fax: () => Promise<String>;
  state: () => Promise<String>;
  state_rank: () => Promise<String>;
  lis_id: () => Promise<String>;
  missed_votes_pct: () => Promise<Float>;
  votes_with_party_pct: () => Promise<Float>;
}

export interface LegislatorPreviousValuesSubscription
  extends Promise<AsyncIterator<LegislatorPreviousValuesNode>>,
    Fragmentable {
  bio_id: () => Promise<AsyncIterator<ID_Output>>;
  short_title: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  middle_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  suffix: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  party: () => Promise<AsyncIterator<String>>;
  twitter_account: () => Promise<AsyncIterator<String>>;
  facebook_account: () => Promise<AsyncIterator<String>>;
  youtube_account: () => Promise<AsyncIterator<String>>;
  govtrack_id: () => Promise<AsyncIterator<String>>;
  cspan_id: () => Promise<AsyncIterator<String>>;
  votesmart_id: () => Promise<AsyncIterator<String>>;
  icpsr_id: () => Promise<AsyncIterator<String>>;
  crp_id: () => Promise<AsyncIterator<String>>;
  fec_candidate_id: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  rss_url: () => Promise<AsyncIterator<String>>;
  contact_form: () => Promise<AsyncIterator<String>>;
  in_office: () => Promise<AsyncIterator<Boolean>>;
  next_election: () => Promise<AsyncIterator<String>>;
  total_votes: () => Promise<AsyncIterator<Int>>;
  missed_votes: () => Promise<AsyncIterator<Int>>;
  total_present: () => Promise<AsyncIterator<Int>>;
  office: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  fax: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  state_rank: () => Promise<AsyncIterator<String>>;
  lis_id: () => Promise<AsyncIterator<String>>;
  missed_votes_pct: () => Promise<AsyncIterator<Float>>;
  votes_with_party_pct: () => Promise<AsyncIterator<Float>>;
}

export interface BillConnectionNode {}

export interface BillConnection
  extends Promise<BillConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<BillEdgeNode>>>() => T;
  aggregate: <T = AggregateBill>() => T;
}

export interface BillConnectionSubscription
  extends Promise<AsyncIterator<BillConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<BillEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateBillSubscription>() => T;
}

export interface AggregateLegislatorNode {
  count: Int;
}

export interface AggregateLegislator
  extends Promise<AggregateLegislatorNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLegislatorSubscription
  extends Promise<AsyncIterator<AggregateLegislatorNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BillNode {
  bill_id: ID_Output;
  bill_type?: String;
  title: String;
  short_title?: String;
  sponsor_id?: String;
  sponsor_name?: String;
  sponsor_state?: String;
  sponsor_party?: String;
  house_passage?: Boolean;
  senate_passage?: Boolean;
  enacted?: Boolean;
  vetoed?: Boolean;
  cosponsors?: Int;
  committees?: String;
  primary_subject: String;
}

export interface Bill extends Promise<BillNode>, Fragmentable {
  bill_id: () => Promise<ID_Output>;
  bill_type: () => Promise<String>;
  title: () => Promise<String>;
  short_title: () => Promise<String>;
  sponsor_id: () => Promise<String>;
  sponsor_name: () => Promise<String>;
  sponsor_state: () => Promise<String>;
  sponsor_party: () => Promise<String>;
  house_passage: () => Promise<Boolean>;
  senate_passage: () => Promise<Boolean>;
  enacted: () => Promise<Boolean>;
  vetoed: () => Promise<Boolean>;
  cosponsors: () => Promise<Int>;
  cosponsors_by_party: <T = Cosponsors_By_Party>() => T;
  committees: () => Promise<String>;
  primary_subject: () => Promise<String>;
}

export interface BillSubscription
  extends Promise<AsyncIterator<BillNode>>,
    Fragmentable {
  bill_id: () => Promise<AsyncIterator<ID_Output>>;
  bill_type: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
  sponsor_id: () => Promise<AsyncIterator<String>>;
  sponsor_name: () => Promise<AsyncIterator<String>>;
  sponsor_state: () => Promise<AsyncIterator<String>>;
  sponsor_party: () => Promise<AsyncIterator<String>>;
  house_passage: () => Promise<AsyncIterator<Boolean>>;
  senate_passage: () => Promise<AsyncIterator<Boolean>>;
  enacted: () => Promise<AsyncIterator<Boolean>>;
  vetoed: () => Promise<AsyncIterator<Boolean>>;
  cosponsors: () => Promise<AsyncIterator<Int>>;
  cosponsors_by_party: <T = Cosponsors_By_PartySubscription>() => T;
  committees: () => Promise<AsyncIterator<String>>;
  primary_subject: () => Promise<AsyncIterator<String>>;
}

export interface LegislatorConnectionNode {}

export interface LegislatorConnection
  extends Promise<LegislatorConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<LegislatorEdgeNode>>>() => T;
  aggregate: <T = AggregateLegislator>() => T;
}

export interface LegislatorConnectionSubscription
  extends Promise<AsyncIterator<LegislatorConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<LegislatorEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateLegislatorSubscription>() => T;
}

export interface LegislatorEdgeNode {
  cursor: String;
}

export interface LegislatorEdge
  extends Promise<LegislatorEdgeNode>,
    Fragmentable {
  node: <T = Legislator>() => T;
  cursor: () => Promise<String>;
}

export interface LegislatorEdgeSubscription
  extends Promise<AsyncIterator<LegislatorEdgeNode>>,
    Fragmentable {
  node: <T = LegislatorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Cosponsors_By_PartyNode {
  D?: Int;
  I?: Int;
  R?: Int;
}

export interface Cosponsors_By_Party
  extends Promise<Cosponsors_By_PartyNode>,
    Fragmentable {
  D: () => Promise<Int>;
  I: () => Promise<Int>;
  R: () => Promise<Int>;
}

export interface Cosponsors_By_PartySubscription
  extends Promise<AsyncIterator<Cosponsors_By_PartyNode>>,
    Fragmentable {
  D: () => Promise<AsyncIterator<Int>>;
  I: () => Promise<AsyncIterator<Int>>;
  R: () => Promise<AsyncIterator<Int>>;
}

export interface ContributorPreviousValuesNode {
  org_name: ID_Output;
  indivs?: String;
  pacs?: String;
  total?: String;
}

export interface ContributorPreviousValues
  extends Promise<ContributorPreviousValuesNode>,
    Fragmentable {
  org_name: () => Promise<ID_Output>;
  indivs: () => Promise<String>;
  pacs: () => Promise<String>;
  total: () => Promise<String>;
}

export interface ContributorPreviousValuesSubscription
  extends Promise<AsyncIterator<ContributorPreviousValuesNode>>,
    Fragmentable {
  org_name: () => Promise<AsyncIterator<ID_Output>>;
  indivs: () => Promise<AsyncIterator<String>>;
  pacs: () => Promise<AsyncIterator<String>>;
  total: () => Promise<AsyncIterator<String>>;
}

export interface LegislatorNode {
  bio_id: ID_Output;
  short_title?: String;
  first_name: String;
  middle_name?: String;
  last_name: String;
  suffix?: String;
  gender?: String;
  party?: String;
  twitter_account?: String;
  facebook_account?: String;
  youtube_account?: String;
  govtrack_id?: String;
  cspan_id?: String;
  votesmart_id?: String;
  icpsr_id?: String;
  crp_id: String;
  fec_candidate_id?: String;
  url?: String;
  rss_url?: String;
  contact_form?: String;
  in_office?: Boolean;
  next_election?: String;
  total_votes?: Int;
  missed_votes?: Int;
  total_present?: Int;
  office?: String;
  phone?: String;
  fax?: String;
  state?: String;
  state_rank?: String;
  lis_id?: String;
  missed_votes_pct?: Float;
  votes_with_party_pct?: Float;
}

export interface Legislator extends Promise<LegislatorNode>, Fragmentable {
  bio_id: () => Promise<ID_Output>;
  short_title: () => Promise<String>;
  first_name: () => Promise<String>;
  middle_name: () => Promise<String>;
  last_name: () => Promise<String>;
  suffix: () => Promise<String>;
  gender: () => Promise<String>;
  party: () => Promise<String>;
  twitter_account: () => Promise<String>;
  facebook_account: () => Promise<String>;
  youtube_account: () => Promise<String>;
  govtrack_id: () => Promise<String>;
  cspan_id: () => Promise<String>;
  votesmart_id: () => Promise<String>;
  icpsr_id: () => Promise<String>;
  crp_id: () => Promise<String>;
  fec_candidate_id: () => Promise<String>;
  url: () => Promise<String>;
  rss_url: () => Promise<String>;
  contact_form: () => Promise<String>;
  in_office: () => Promise<Boolean>;
  next_election: () => Promise<String>;
  total_votes: () => Promise<Int>;
  missed_votes: () => Promise<Int>;
  total_present: () => Promise<Int>;
  office: () => Promise<String>;
  phone: () => Promise<String>;
  fax: () => Promise<String>;
  state: () => Promise<String>;
  state_rank: () => Promise<String>;
  lis_id: () => Promise<String>;
  missed_votes_pct: () => Promise<Float>;
  votes_with_party_pct: () => Promise<Float>;
  bills: <T = Promise<Array<BillNode>>>(
    args?: {
      where?: BillWhereInput;
      orderBy?: BillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  industries: <T = Promise<Array<IndustryNode>>>(
    args?: {
      where?: IndustryWhereInput;
      orderBy?: IndustryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sectors: <T = Promise<Array<SectorNode>>>(
    args?: {
      where?: SectorWhereInput;
      orderBy?: SectorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  contributors: <T = Promise<Array<ContributorNode>>>(
    args?: {
      where?: ContributorWhereInput;
      orderBy?: ContributorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  summary: <T = Summary>() => T;
}

export interface LegislatorSubscription
  extends Promise<AsyncIterator<LegislatorNode>>,
    Fragmentable {
  bio_id: () => Promise<AsyncIterator<ID_Output>>;
  short_title: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  middle_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  suffix: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  party: () => Promise<AsyncIterator<String>>;
  twitter_account: () => Promise<AsyncIterator<String>>;
  facebook_account: () => Promise<AsyncIterator<String>>;
  youtube_account: () => Promise<AsyncIterator<String>>;
  govtrack_id: () => Promise<AsyncIterator<String>>;
  cspan_id: () => Promise<AsyncIterator<String>>;
  votesmart_id: () => Promise<AsyncIterator<String>>;
  icpsr_id: () => Promise<AsyncIterator<String>>;
  crp_id: () => Promise<AsyncIterator<String>>;
  fec_candidate_id: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  rss_url: () => Promise<AsyncIterator<String>>;
  contact_form: () => Promise<AsyncIterator<String>>;
  in_office: () => Promise<AsyncIterator<Boolean>>;
  next_election: () => Promise<AsyncIterator<String>>;
  total_votes: () => Promise<AsyncIterator<Int>>;
  missed_votes: () => Promise<AsyncIterator<Int>>;
  total_present: () => Promise<AsyncIterator<Int>>;
  office: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  fax: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  state_rank: () => Promise<AsyncIterator<String>>;
  lis_id: () => Promise<AsyncIterator<String>>;
  missed_votes_pct: () => Promise<AsyncIterator<Float>>;
  votes_with_party_pct: () => Promise<AsyncIterator<Float>>;
  bills: <T = Promise<AsyncIterator<Array<BillSubscription>>>>(
    args?: {
      where?: BillWhereInput;
      orderBy?: BillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  industries: <T = Promise<AsyncIterator<Array<IndustrySubscription>>>>(
    args?: {
      where?: IndustryWhereInput;
      orderBy?: IndustryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sectors: <T = Promise<AsyncIterator<Array<SectorSubscription>>>>(
    args?: {
      where?: SectorWhereInput;
      orderBy?: SectorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  contributors: <T = Promise<AsyncIterator<Array<ContributorSubscription>>>>(
    args?: {
      where?: ContributorWhereInput;
      orderBy?: ContributorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  summary: <T = SummarySubscription>() => T;
}

export interface AggregateContributorNode {
  count: Int;
}

export interface AggregateContributor
  extends Promise<AggregateContributorNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContributorSubscription
  extends Promise<AsyncIterator<AggregateContributorNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ContributorConnectionNode {}

export interface ContributorConnection
  extends Promise<ContributorConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<ContributorEdgeNode>>>() => T;
  aggregate: <T = AggregateContributor>() => T;
}

export interface ContributorConnectionSubscription
  extends Promise<AsyncIterator<ContributorConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<ContributorEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateContributorSubscription>() => T;
}

export interface AggregateCosponsors_By_PartyNode {
  count: Int;
}

export interface AggregateCosponsors_By_Party
  extends Promise<AggregateCosponsors_By_PartyNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCosponsors_By_PartySubscription
  extends Promise<AsyncIterator<AggregateCosponsors_By_PartyNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateIndustryNode {
  count: Int;
}

export interface AggregateIndustry
  extends Promise<AggregateIndustryNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIndustrySubscription
  extends Promise<AsyncIterator<AggregateIndustryNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Cosponsors_By_PartySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface Cosponsors_By_PartySubscriptionPayload
  extends Promise<Cosponsors_By_PartySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Cosponsors_By_Party>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Cosponsors_By_PartyPreviousValues>() => T;
}

export interface Cosponsors_By_PartySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Cosponsors_By_PartySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Cosponsors_By_PartySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Cosponsors_By_PartyPreviousValuesSubscription>() => T;
}

export interface IndustryConnectionNode {}

export interface IndustryConnection
  extends Promise<IndustryConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<IndustryEdgeNode>>>() => T;
  aggregate: <T = AggregateIndustry>() => T;
}

export interface IndustryConnectionSubscription
  extends Promise<AsyncIterator<IndustryConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<IndustryEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateIndustrySubscription>() => T;
}

export interface Cosponsors_By_PartyPreviousValuesNode {
  D?: Int;
  I?: Int;
  R?: Int;
}

export interface Cosponsors_By_PartyPreviousValues
  extends Promise<Cosponsors_By_PartyPreviousValuesNode>,
    Fragmentable {
  D: () => Promise<Int>;
  I: () => Promise<Int>;
  R: () => Promise<Int>;
}

export interface Cosponsors_By_PartyPreviousValuesSubscription
  extends Promise<AsyncIterator<Cosponsors_By_PartyPreviousValuesNode>>,
    Fragmentable {
  D: () => Promise<AsyncIterator<Int>>;
  I: () => Promise<AsyncIterator<Int>>;
  R: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSectorNode {
  count: Int;
}

export interface AggregateSector
  extends Promise<AggregateSectorNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSectorSubscription
  extends Promise<AsyncIterator<AggregateSectorNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Cosponsors_By_PartyEdgeNode {
  cursor: String;
}

export interface Cosponsors_By_PartyEdge
  extends Promise<Cosponsors_By_PartyEdgeNode>,
    Fragmentable {
  node: <T = Cosponsors_By_Party>() => T;
  cursor: () => Promise<String>;
}

export interface Cosponsors_By_PartyEdgeSubscription
  extends Promise<AsyncIterator<Cosponsors_By_PartyEdgeNode>>,
    Fragmentable {
  node: <T = Cosponsors_By_PartySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SectorConnectionNode {}

export interface SectorConnection
  extends Promise<SectorConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SectorEdgeNode>>>() => T;
  aggregate: <T = AggregateSector>() => T;
}

export interface SectorConnectionSubscription
  extends Promise<AsyncIterator<SectorConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<SectorEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateSectorSubscription>() => T;
}

export interface BillSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface BillSubscriptionPayload
  extends Promise<BillSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Bill>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BillPreviousValues>() => T;
}

export interface BillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BillSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BillPreviousValuesSubscription>() => T;
}

export interface AggregateSummaryNode {
  count: Int;
}

export interface AggregateSummary
  extends Promise<AggregateSummaryNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSummarySubscription
  extends Promise<AsyncIterator<AggregateSummaryNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BillPreviousValuesNode {
  bill_id: ID_Output;
  bill_type?: String;
  title: String;
  short_title?: String;
  sponsor_id?: String;
  sponsor_name?: String;
  sponsor_state?: String;
  sponsor_party?: String;
  house_passage?: Boolean;
  senate_passage?: Boolean;
  enacted?: Boolean;
  vetoed?: Boolean;
  cosponsors?: Int;
  committees?: String;
  primary_subject: String;
}

export interface BillPreviousValues
  extends Promise<BillPreviousValuesNode>,
    Fragmentable {
  bill_id: () => Promise<ID_Output>;
  bill_type: () => Promise<String>;
  title: () => Promise<String>;
  short_title: () => Promise<String>;
  sponsor_id: () => Promise<String>;
  sponsor_name: () => Promise<String>;
  sponsor_state: () => Promise<String>;
  sponsor_party: () => Promise<String>;
  house_passage: () => Promise<Boolean>;
  senate_passage: () => Promise<Boolean>;
  enacted: () => Promise<Boolean>;
  vetoed: () => Promise<Boolean>;
  cosponsors: () => Promise<Int>;
  committees: () => Promise<String>;
  primary_subject: () => Promise<String>;
}

export interface BillPreviousValuesSubscription
  extends Promise<AsyncIterator<BillPreviousValuesNode>>,
    Fragmentable {
  bill_id: () => Promise<AsyncIterator<ID_Output>>;
  bill_type: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
  sponsor_id: () => Promise<AsyncIterator<String>>;
  sponsor_name: () => Promise<AsyncIterator<String>>;
  sponsor_state: () => Promise<AsyncIterator<String>>;
  sponsor_party: () => Promise<AsyncIterator<String>>;
  house_passage: () => Promise<AsyncIterator<Boolean>>;
  senate_passage: () => Promise<AsyncIterator<Boolean>>;
  enacted: () => Promise<AsyncIterator<Boolean>>;
  vetoed: () => Promise<AsyncIterator<Boolean>>;
  cosponsors: () => Promise<AsyncIterator<Int>>;
  committees: () => Promise<AsyncIterator<String>>;
  primary_subject: () => Promise<AsyncIterator<String>>;
}

export interface SummaryConnectionNode {}

export interface SummaryConnection
  extends Promise<SummaryConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SummaryEdgeNode>>>() => T;
  aggregate: <T = AggregateSummary>() => T;
}

export interface SummaryConnectionSubscription
  extends Promise<AsyncIterator<SummaryConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<SummaryEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateSummarySubscription>() => T;
}

export interface ContributorSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ContributorSubscriptionPayload
  extends Promise<ContributorSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Contributor>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContributorPreviousValues>() => T;
}

export interface ContributorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContributorSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContributorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContributorPreviousValuesSubscription>() => T;
}

export interface AggregateBillNode {
  count: Int;
}

export interface AggregateBill
  extends Promise<AggregateBillNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBillSubscription
  extends Promise<AsyncIterator<AggregateBillNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SummarySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SummarySubscriptionPayload
  extends Promise<SummarySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Summary>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SummaryPreviousValues>() => T;
}

export interface SummarySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SummarySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SummarySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SummaryPreviousValuesSubscription>() => T;
}

export interface ContributorEdgeNode {
  cursor: String;
}

export interface ContributorEdge
  extends Promise<ContributorEdgeNode>,
    Fragmentable {
  node: <T = Contributor>() => T;
  cursor: () => Promise<String>;
}

export interface ContributorEdgeSubscription
  extends Promise<AsyncIterator<ContributorEdgeNode>>,
    Fragmentable {
  node: <T = ContributorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SummaryPreviousValuesNode {
  total?: String;
  spent?: String;
  cash_on_hand?: String;
  debt?: String;
}

export interface SummaryPreviousValues
  extends Promise<SummaryPreviousValuesNode>,
    Fragmentable {
  total: () => Promise<String>;
  spent: () => Promise<String>;
  cash_on_hand: () => Promise<String>;
  debt: () => Promise<String>;
}

export interface SummaryPreviousValuesSubscription
  extends Promise<AsyncIterator<SummaryPreviousValuesNode>>,
    Fragmentable {
  total: () => Promise<AsyncIterator<String>>;
  spent: () => Promise<AsyncIterator<String>>;
  cash_on_hand: () => Promise<AsyncIterator<String>>;
  debt: () => Promise<AsyncIterator<String>>;
}

export interface IndustryEdgeNode {
  cursor: String;
}

export interface IndustryEdge extends Promise<IndustryEdgeNode>, Fragmentable {
  node: <T = Industry>() => T;
  cursor: () => Promise<String>;
}

export interface IndustryEdgeSubscription
  extends Promise<AsyncIterator<IndustryEdgeNode>>,
    Fragmentable {
  node: <T = IndustrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SectorEdgeNode {
  cursor: String;
}

export interface SectorEdge extends Promise<SectorEdgeNode>, Fragmentable {
  node: <T = Sector>() => T;
  cursor: () => Promise<String>;
}

export interface SectorEdgeSubscription
  extends Promise<AsyncIterator<SectorEdgeNode>>,
    Fragmentable {
  node: <T = SectorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SectorSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SectorSubscriptionPayload
  extends Promise<SectorSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Sector>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SectorPreviousValues>() => T;
}

export interface SectorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SectorSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SectorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SectorPreviousValuesSubscription>() => T;
}

export interface SummaryEdgeNode {
  cursor: String;
}

export interface SummaryEdge extends Promise<SummaryEdgeNode>, Fragmentable {
  node: <T = Summary>() => T;
  cursor: () => Promise<String>;
}

export interface SummaryEdgeSubscription
  extends Promise<AsyncIterator<SummaryEdgeNode>>,
    Fragmentable {
  node: <T = SummarySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LegislatorSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LegislatorSubscriptionPayload
  extends Promise<LegislatorSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Legislator>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LegislatorPreviousValues>() => T;
}

export interface LegislatorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LegislatorSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LegislatorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LegislatorPreviousValuesSubscription>() => T;
}

export interface IndustryPreviousValuesNode {
  industry_name: String;
  industry_code: ID_Output;
  indivs?: String;
  pacs?: String;
  total?: String;
}

export interface IndustryPreviousValues
  extends Promise<IndustryPreviousValuesNode>,
    Fragmentable {
  industry_name: () => Promise<String>;
  industry_code: () => Promise<ID_Output>;
  indivs: () => Promise<String>;
  pacs: () => Promise<String>;
  total: () => Promise<String>;
}

export interface IndustryPreviousValuesSubscription
  extends Promise<AsyncIterator<IndustryPreviousValuesNode>>,
    Fragmentable {
  industry_name: () => Promise<AsyncIterator<String>>;
  industry_code: () => Promise<AsyncIterator<ID_Output>>;
  indivs: () => Promise<AsyncIterator<String>>;
  pacs: () => Promise<AsyncIterator<String>>;
  total: () => Promise<AsyncIterator<String>>;
}

export interface IndustrySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface IndustrySubscriptionPayload
  extends Promise<IndustrySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Industry>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IndustryPreviousValues>() => T;
}

export interface IndustrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IndustrySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IndustrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IndustryPreviousValuesSubscription>() => T;
}

export interface Cosponsors_By_PartyConnectionNode {}

export interface Cosponsors_By_PartyConnection
  extends Promise<Cosponsors_By_PartyConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<Cosponsors_By_PartyEdgeNode>>>() => T;
  aggregate: <T = AggregateCosponsors_By_Party>() => T;
}

export interface Cosponsors_By_PartyConnectionSubscription
  extends Promise<AsyncIterator<Cosponsors_By_PartyConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<Cosponsors_By_PartyEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateCosponsors_By_PartySubscription>() => T;
}

export interface SectorPreviousValuesNode {
  sector_name: String;
  sector_code: ID_Output;
  indivs?: String;
  pacs?: String;
}

export interface SectorPreviousValues
  extends Promise<SectorPreviousValuesNode>,
    Fragmentable {
  sector_name: () => Promise<String>;
  sector_code: () => Promise<ID_Output>;
  indivs: () => Promise<String>;
  pacs: () => Promise<String>;
}

export interface SectorPreviousValuesSubscription
  extends Promise<AsyncIterator<SectorPreviousValuesNode>>,
    Fragmentable {
  sector_name: () => Promise<AsyncIterator<String>>;
  sector_code: () => Promise<AsyncIterator<ID_Output>>;
  indivs: () => Promise<AsyncIterator<String>>;
  pacs: () => Promise<AsyncIterator<String>>;
}

export interface ContributorNode {
  org_name: ID_Output;
  indivs?: String;
  pacs?: String;
  total?: String;
}

export interface Contributor extends Promise<ContributorNode>, Fragmentable {
  org_name: () => Promise<ID_Output>;
  indivs: () => Promise<String>;
  pacs: () => Promise<String>;
  total: () => Promise<String>;
}

export interface ContributorSubscription
  extends Promise<AsyncIterator<ContributorNode>>,
    Fragmentable {
  org_name: () => Promise<AsyncIterator<ID_Output>>;
  indivs: () => Promise<AsyncIterator<String>>;
  pacs: () => Promise<AsyncIterator<String>>;
  total: () => Promise<AsyncIterator<String>>;
}

export interface SummaryNode {
  total?: String;
  spent?: String;
  cash_on_hand?: String;
  debt?: String;
}

export interface Summary extends Promise<SummaryNode>, Fragmentable {
  total: () => Promise<String>;
  spent: () => Promise<String>;
  cash_on_hand: () => Promise<String>;
  debt: () => Promise<String>;
}

export interface SummarySubscription
  extends Promise<AsyncIterator<SummaryNode>>,
    Fragmentable {
  total: () => Promise<AsyncIterator<String>>;
  spent: () => Promise<AsyncIterator<String>>;
  cash_on_hand: () => Promise<AsyncIterator<String>>;
  debt: () => Promise<AsyncIterator<String>>;
}

export interface SectorNode {
  sector_name: String;
  sector_code: ID_Output;
  indivs?: String;
  pacs?: String;
}

export interface Sector extends Promise<SectorNode>, Fragmentable {
  sector_name: () => Promise<String>;
  sector_code: () => Promise<ID_Output>;
  indivs: () => Promise<String>;
  pacs: () => Promise<String>;
}

export interface SectorSubscription
  extends Promise<AsyncIterator<SectorNode>>,
    Fragmentable {
  sector_name: () => Promise<AsyncIterator<String>>;
  sector_code: () => Promise<AsyncIterator<ID_Output>>;
  indivs: () => Promise<AsyncIterator<String>>;
  pacs: () => Promise<AsyncIterator<String>>;
}

export interface IndustryNode {
  industry_name: String;
  industry_code: ID_Output;
  indivs?: String;
  pacs?: String;
  total?: String;
}

export interface Industry extends Promise<IndustryNode>, Fragmentable {
  industry_name: () => Promise<String>;
  industry_code: () => Promise<ID_Output>;
  indivs: () => Promise<String>;
  pacs: () => Promise<String>;
  total: () => Promise<String>;
}

export interface IndustrySubscription
  extends Promise<AsyncIterator<IndustryNode>>,
    Fragmentable {
  industry_name: () => Promise<AsyncIterator<String>>;
  industry_code: () => Promise<AsyncIterator<ID_Output>>;
  indivs: () => Promise<AsyncIterator<String>>;
  pacs: () => Promise<AsyncIterator<String>>;
  total: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Type Defs
 */

export const prisma: Prisma;
